Tfun_C[ti:tf,i]=temp[,2]
temp=output[[7]]
anabolism[ti:tf,i]=temp[,1]
catabolism[ti:tf,i]=temp[,2]
temp=output[[8]]
NH4[ti:tf,i]=temp
temp=output[[9]]
O2[ti:tf,i]=temp
temp=output[[10]]
days_commercial[i]=temp
source('C:/Users/Damiano/Desktop/R package/Breammod/R/Bass_spatial_loop.R')
forcings[[2]] = sst[1:tf,i]
output<- Bass_spatial_loop(userpath, forcings)
# Save outputs
temp=output[[1]]
weight[ti:tf,i]=temp
temp=output[[2]]
faeces_P[ti:tf,i]=temp[,1]
faeces_L[ti:tf,i]=temp[,2]
faeces_C[ti:tf,i]=temp[,3]
temp=output[[3]]
waste_P[ti:tf,i]=temp[,1]
waste_L[ti:tf,i]=temp[,2]
waste_C[ti:tf,i]=temp[,3]
temp=output[[4]]
potential_ingestion[ti:tf,i]=temp
temp=output[[5]]
actual_ingestion[ti:tf,i]=temp
temp=output[[6]]
Tfun_A[ti:tf,i]=temp[,1]
Tfun_C[ti:tf,i]=temp[,2]
temp=output[[7]]
anabolism[ti:tf,i]=temp[,1]
catabolism[ti:tf,i]=temp[,2]
temp=output[[8]]
NH4[ti:tf,i]=temp
temp=output[[9]]
O2[ti:tf,i]=temp
temp=output[[10]]
days_commercial[i]=temp
source('C:/Users/Damiano/Desktop/R package/Breammod/R/Bass_spatial_post.R')
forcings[[2]] = sst[1:tf,i]
output<- Bass_spatial_loop(userpath, forcings)
# Save outputs
temp=output[[1]]
weight[ti:tf,i]=temp
temp=output[[2]]
faeces_P[ti:tf,i]=temp[,1]
faeces_L[ti:tf,i]=temp[,2]
faeces_C[ti:tf,i]=temp[,3]
temp=output[[3]]
waste_P[ti:tf,i]=temp[,1]
waste_L[ti:tf,i]=temp[,2]
waste_C[ti:tf,i]=temp[,3]
temp=output[[4]]
potential_ingestion[ti:tf,i]=temp
temp=output[[5]]
actual_ingestion[ti:tf,i]=temp
temp=output[[6]]
Tfun_A[ti:tf,i]=temp[,1]
Tfun_C[ti:tf,i]=temp[,2]
temp=output[[7]]
anabolism[ti:tf,i]=temp[,1]
catabolism[ti:tf,i]=temp[,2]
temp=output[[8]]
NH4[ti:tf,i]=temp
temp=output[[9]]
O2[ti:tf,i]=temp
temp=output[[10]]
days_commercial[i]=temp
View(days_commercial)
i=2
forcings[[2]] = sst[1:tf,i]
output<- Bass_spatial_loop(userpath, forcings)
# Save outputs
temp=output[[1]]
weight[ti:tf,i]=temp
temp=output[[2]]
faeces_P[ti:tf,i]=temp[,1]
faeces_L[ti:tf,i]=temp[,2]
faeces_C[ti:tf,i]=temp[,3]
temp=output[[3]]
waste_P[ti:tf,i]=temp[,1]
waste_L[ti:tf,i]=temp[,2]
waste_C[ti:tf,i]=temp[,3]
temp=output[[4]]
potential_ingestion[ti:tf,i]=temp
temp=output[[5]]
actual_ingestion[ti:tf,i]=temp
temp=output[[6]]
Tfun_A[ti:tf,i]=temp[,1]
Tfun_C[ti:tf,i]=temp[,2]
temp=output[[7]]
anabolism[ti:tf,i]=temp[,1]
catabolism[ti:tf,i]=temp[,2]
temp=output[[8]]
NH4[ti:tf,i]=temp
temp=output[[9]]
O2[ti:tf,i]=temp
temp=output[[10]]
days_commercial[i]=temp
i=3
forcings[[2]] = sst[1:tf,i]
output<- Bass_spatial_loop(userpath, forcings)
# Save outputs
temp=output[[1]]
weight[ti:tf,i]=temp
temp=output[[2]]
faeces_P[ti:tf,i]=temp[,1]
faeces_L[ti:tf,i]=temp[,2]
faeces_C[ti:tf,i]=temp[,3]
temp=output[[3]]
waste_P[ti:tf,i]=temp[,1]
waste_L[ti:tf,i]=temp[,2]
waste_C[ti:tf,i]=temp[,3]
temp=output[[4]]
potential_ingestion[ti:tf,i]=temp
temp=output[[5]]
actual_ingestion[ti:tf,i]=temp
temp=output[[6]]
Tfun_A[ti:tf,i]=temp[,1]
Tfun_C[ti:tf,i]=temp[,2]
temp=output[[7]]
anabolism[ti:tf,i]=temp[,1]
catabolism[ti:tf,i]=temp[,2]
temp=output[[8]]
NH4[ti:tf,i]=temp
temp=output[[9]]
O2[ti:tf,i]=temp
temp=output[[10]]
days_commercial[i]=temp
coord <- read.csv(paste0(userpath,"/Bass_spatial/Inputs/Spatial forcings//coordinates.csv"))
coord <- coord[,-(1)]
library(RAC)
forcings<-Bass_spatial_dataloader(userpath)
Bass_spatial_main(userpath,forcings)
library(RAC)
Bass_spatial_main(userpath,forcings)
library(RAC)
Bass_spatial_main(userpath,forcings)
source('C:/Users/Damiano/Desktop/R package/Breammod/R/Bass_spatial_post.R')
source('C:/Users/Damiano/Desktop/R package/Breammod/R/Bass_spatial_pre.R')
source('C:/Users/Damiano/Desktop/R package/Breammod/R/Bass_spatial_pre_int.R')
source('C:/Users/Damiano/Desktop/R package/Breammod/R/Bass_ind_equations.R')
source('C:/Users/Damiano/Desktop/R package/Breammod/R/Bass_spatial_loop.R')
source('C:/Users/Damiano/Desktop/R package/Breammod/R/Bass_spatial_RKsolver.R')
foo <- function(w,S){which(w>S)[1]}
weightSave=400:1:500
plot(weightSave)
CS=450
arg=as.data.frame(weightSave)
days <- apply(arg,1,foo,S=CS)
days_L <- as.data.frame(days)
NonNAindex <- which(!is.na(days_L))
if (length(NonNAindex)==0) {
daysToSize=99999
}else{  daysToSize <- min(NonNAindex)
}
daysToSize<-as.list(daysToSize)
View(daysToSize)
weightSave=300:1:400
arg=as.data.frame(weightSave)
days <- apply(arg,1,foo,S=CS)
days_L <- as.data.frame(days)
NonNAindex <- which(!is.na(days_L))
if (length(NonNAindex)==0) {
daysToSize=99999
}else{  daysToSize <- min(NonNAindex)
}
daysToSize<-as.list(daysToSize)
View(daysToSize)
View(days_L)
View(daysToSize)
rm(daysToSize)
plot(weightSave)
arg=as.data.frame(weightSave)
days <- apply(arg,1,foo,S=CS)
days_L <- as.data.frame(days)
NonNAindex <- which(!is.na(days_L))
if (length(NonNAindex)==0) {
daysToSize=99999
}else{  daysToSize <- min(NonNAindex)
}
daysToSize<-as.list(daysToSize)
View(daysToSize)
View(out_pre)
arg=as.data.frame(weightSave)
days <- apply(arg,1,foo,S=CS)
days_L <- as.data.frame(days)
NonNAindex <- which(!is.na(days_L))
if (length(NonNAindex)==0) {
daysToSize=99999
}else{  daysToSize <- min(NonNAindex)
}
daysToSize<-as.list(daysToSize)
View(daysToSize)
daysToSize=9999
library(RAC)
userpath
userpath"C://Users/Damiano/Desktop"
userpath="C://Users/Damiano/Desktop"
forcings<-Bass_spatial_dataloader(userpath)
Bass_spatial_main(useprath,forcings)
Bass_spatial_main(useprath,forcings)
Bass_spatial_main(userpath,forcings)
library(RAC)
Bass_spatial_main(userpath,forcings)
weightSave<-400:1:500
plot(weightSave)
CS=450
foo <- function(w,S){which(w>S)[1]}
arg=as.data.frame(weightSave)
days <- apply(arg,1,foo,S=CS)
days_L <- as.data.frame(days)
NonNAindex <- which(!is.na(days_L))
if (length(NonNAindex)==0) {
daysToSize=9999
}else{  daysToSize <- min(NonNAindex)
}
daysToSize
CS=600
foo <- function(w,S){which(w>S)[1]}
arg=as.data.frame(weightSave)
days <- apply(arg,1,foo,S=CS)
days_L <- as.data.frame(days)
NonNAindex <- which(!is.na(days_L))
if (length(NonNAindex)==0) {
daysToSize=9999
}else{  daysToSize <- min(NonNAindex)
}
library(RAC)
forcings<-Bass_spatial_dataloader(userpath)
Bass_spatial_main(useprath,forcings)
Bass_spatial_main(userpath,forcings)
userpath='C://Users/Damiano/Desktop'
forcings<-Bass_spatial_dataloader(userpath)
source('C:/Users/Damiano/Desktop/R package/Breammod/R/Bass_spatial_post.R')
source('C:/Users/Damiano/Desktop/R package/Breammod/R/Bass_spatial_pre.R')
source('C:/Users/Damiano/Desktop/R package/Breammod/R/Bass_spatial_pre_int.R')
source('C:/Users/Damiano/Desktop/R package/Breammod/R/Bass_ind_equations.R')
source('C:/Users/Damiano/Desktop/R package/Breammod/R/Bass_spatial_loop.R')
source('C:/Users/Damiano/Desktop/R package/Breammod/R/Bass_spatial_RKsolver.R')
out_pre<-Bass_spatial_pre(userpath,forcings)
sst=forcings[[2]]
#integration_times
times=out_pre[[6]]
ti=times[1]
tf=times[2]
Dates=as.Date(out_pre[[7]],"%d/%m/%Y")
# Initialize variables to save to maps
weight<-data.frame(matrix(0,ncol(sst),nrow=tf))
actual_ingestion<-data.frame(matrix(0,ncol(sst),nrow=tf))
potential_ingestion<-data.frame(matrix(0,ncol(sst),nrow=tf))
faeces_P<-data.frame(matrix(0,ncol(sst),nrow=tf))
faeces_L<-data.frame(matrix(0,ncol(sst),nrow=tf))
faeces_C<-data.frame(matrix(0,ncol(sst),nrow=tf))
waste_P<-data.frame(matrix(0,ncol(sst),nrow=tf))
waste_L<-data.frame(matrix(0,ncol(sst),nrow=tf))
waste_C<-data.frame(matrix(0,ncol(sst),nrow=tf))
Tfun_A<-data.frame(matrix(0,ncol(sst),nrow=tf))
Tfun_C<-data.frame(matrix(0,ncol(sst),nrow=tf))
anabolism<-data.frame(matrix(0,ncol(sst),nrow=tf))
catabolism<-data.frame(matrix(0,ncol(sst),nrow=tf))
NH4<-data.frame(matrix(0,ncol(sst),nrow=tf))
O2<-data.frame(matrix(0,ncol(sst),nrow=tf))
days_commercial<-matrix(0,ncol(sst),nrow=1)
i=1
forcings[[2]] = sst[1:tf,i]
output<- Bass_spatial_loop(userpath, forcings)
# Save outputs
temp=output[[1]]
weight[ti:tf,i]=temp
temp=output[[2]]
faeces_P[ti:tf,i]=temp[,1]
faeces_L[ti:tf,i]=temp[,2]
faeces_C[ti:tf,i]=temp[,3]
temp=output[[3]]
waste_P[ti:tf,i]=temp[,1]
waste_L[ti:tf,i]=temp[,2]
waste_C[ti:tf,i]=temp[,3]
temp=output[[4]]
potential_ingestion[ti:tf,i]=temp
temp=output[[5]]
actual_ingestion[ti:tf,i]=temp
temp=output[[6]]
Tfun_A[ti:tf,i]=temp[,1]
Tfun_C[ti:tf,i]=temp[,2]
temp=output[[7]]
anabolism[ti:tf,i]=temp[,1]
catabolism[ti:tf,i]=temp[,2]
temp=output[[8]]
NH4[ti:tf,i]=temp
temp=output[[9]]
O2[ti:tf,i]=temp
temp=output[[10]]
days_commercial[i]=temp
View(days_commercial)
days_commercial<-days_commercial[-(1:(ti-1)),]
library(RAC)
forcings<-Bass_spatial_dataloader(userpath)
Bass_spatial_main(userpath,forcings)
forcings<-Bass_spatial_dataloader(userpath)
Bass_spatial_main(userpath,forcings)
library(RAC)
library(RAC)
library(RAC)
library(RAC)
userpath
Bass_spatial_skeleton(userpath)
forcings<-Bass_spatial_dataloader(userpath)
Bass_spatial_main(userpath,forcings)
source('C:/Users/Damiano/Desktop/R package/Breammod/R/Bass_spatial_loop.R')
source('C:/Users/Damiano/Desktop/R package/Breammod/R/Bass_ind_equations.R')
source('C:/Users/Damiano/Desktop/R package/Breammod/R/Bass_spatial_RKsolver.R')
source('C:/Users/Damiano/Desktop/R package/Breammod/R/Bass_spatial_pre_int.R')
source('C:/Users/Damiano/Desktop/R package/Breammod/R/Bass_spatial_pre.R')
source('C:/Users/Damiano/Desktop/R package/Breammod/R/Bass_spatial_post.R')
source('C:/Users/Damiano/Desktop/R package/Breammod/R/Bass_spatial_main.R')
out_pre<-Bass_spatial_pre(userpath,forcings)
sst=forcings[[2]]
#integration_times
times=out_pre[[6]]
ti=times[1]
tf=times[2]
Dates=as.Date(out_pre[[7]],"%d/%m/%Y")
# Initialize variables to save to maps
weight<-data.frame(matrix(0,ncol(sst),nrow=tf))
actual_ingestion<-data.frame(matrix(0,ncol(sst),nrow=tf))
potential_ingestion<-data.frame(matrix(0,ncol(sst),nrow=tf))
faeces_P<-data.frame(matrix(0,ncol(sst),nrow=tf))
faeces_L<-data.frame(matrix(0,ncol(sst),nrow=tf))
faeces_C<-data.frame(matrix(0,ncol(sst),nrow=tf))
waste_P<-data.frame(matrix(0,ncol(sst),nrow=tf))
waste_L<-data.frame(matrix(0,ncol(sst),nrow=tf))
waste_C<-data.frame(matrix(0,ncol(sst),nrow=tf))
Tfun_A<-data.frame(matrix(0,ncol(sst),nrow=tf))
Tfun_C<-data.frame(matrix(0,ncol(sst),nrow=tf))
anabolism<-data.frame(matrix(0,ncol(sst),nrow=tf))
catabolism<-data.frame(matrix(0,ncol(sst),nrow=tf))
NH4<-data.frame(matrix(0,ncol(sst),nrow=tf))
O2<-data.frame(matrix(0,ncol(sst),nrow=tf))
days_commercial<-matrix(0,ncol(sst),nrow=1)
i=1
# Solve ODE
forcings[[2]] = sst[1:tf,i]
output<- Bass_spatial_loop(userpath, forcings)
# Save outputs
temp=output[[1]]
weight[ti:tf,i]=temp
temp=output[[2]]
faeces_P[ti:tf,i]=temp[,1]
faeces_L[ti:tf,i]=temp[,2]
faeces_C[ti:tf,i]=temp[,3]
temp=output[[3]]
waste_P[ti:tf,i]=temp[,1]
waste_L[ti:tf,i]=temp[,2]
waste_C[ti:tf,i]=temp[,3]
temp=output[[4]]
potential_ingestion[ti:tf,i]=temp
temp=output[[5]]
actual_ingestion[ti:tf,i]=temp
temp=output[[6]]
Tfun_A[ti:tf,i]=temp[,1]
Tfun_C[ti:tf,i]=temp[,2]
temp=output[[7]]
anabolism[ti:tf,i]=temp[,1]
catabolism[ti:tf,i]=temp[,2]
temp=output[[8]]
NH4[ti:tf,i]=temp
temp=output[[9]]
O2[ti:tf,i]=temp
temp=output[[10]]
days_commercial[i]=temp
View(days_commercial)
i=2
# Solve ODE
forcings[[2]] = sst[1:tf,i]
output<- Bass_spatial_loop(userpath, forcings)
# Save outputs
temp=output[[1]]
weight[ti:tf,i]=temp
temp=output[[2]]
faeces_P[ti:tf,i]=temp[,1]
faeces_L[ti:tf,i]=temp[,2]
faeces_C[ti:tf,i]=temp[,3]
temp=output[[3]]
waste_P[ti:tf,i]=temp[,1]
waste_L[ti:tf,i]=temp[,2]
waste_C[ti:tf,i]=temp[,3]
temp=output[[4]]
potential_ingestion[ti:tf,i]=temp
temp=output[[5]]
actual_ingestion[ti:tf,i]=temp
temp=output[[6]]
Tfun_A[ti:tf,i]=temp[,1]
Tfun_C[ti:tf,i]=temp[,2]
temp=output[[7]]
anabolism[ti:tf,i]=temp[,1]
catabolism[ti:tf,i]=temp[,2]
temp=output[[8]]
NH4[ti:tf,i]=temp
temp=output[[9]]
O2[ti:tf,i]=temp
temp=output[[10]]
days_commercial[i]=temp
View(days_commercial_map)
View(days_commercial)
coordinates(days_commercial_map) <- ~V1+V2
userpath
userpath="C://Users/Damiano/Desktop"
Bass_spatial_dataloader(userpath)
library("RAC", lib.loc="~/R/win-library/3.3")
Bass_spatial_dataloader(userpath)
Bass_spatial_skeleton(userpath )
forcings<-Bass_spatial_dataloader(userpath,forcings)
forcings<-Bass_spatial_dataloader(userpath)
Bass_spatial_main(userpath,forcings)
library(RAC)
library(RAC)
library("knitr", lib.loc="~/R/win-library/3.3")
library(RAC)
Bream_spatial_skeleton(userpath)
library(RAC)
library(RAC)
Bream_spatial_skeleton(userpath)
forcings<-Bream_spatial_dataloader(userpath)
Bream_spatial_main(userpath,forcings)
library(RAC)
Bream_spatial_skeleton(userpath)
forcings<-Bream_spatial_dataloader(userpath)
Bream_spatial_main(userpath,forcings)
library("RAC", lib.loc="~/R/win-library/3.3")
library(RAC)
install.packages('knitr', repos = c('http://rforge.net', 'http://cran.rstudio.org'),
type = 'source')
install.packages("knitr", repos = c("http://rforge.net", "http://cran.rstudio.org"), type = "source")
Bass_spatial_skeleton(userpath)
library("RAC", lib.loc="~/R/win-library/3.3")
Bass_spatial_skeleton(userpath)
forcings<-Bass_spatial_dataloader(userpath)
Bass_spatial_main(userpath,forcings)
userpath
Mussel_pop_skeleton(userpath)
library("RAC", lib.loc="~/R/win-library/3.3")
Mussels_pop_skeleton(userpath)
Mussel_pop_skeleton(userpath)
forcings<-Mussel_pop_dataloader(userpath)
out<-Mussel_pop_main(userpath,forcings)
library(RAC)
userpath
Bass_pop_skeleton(userpath)
forcings<-Bass_pop_dataloader(userpath)
out<-Bass_ind_main(useprath,forcings)
out<-Bass_pop_main(useprath,forcings)
library(RAC)
Mussel_pop_skeleton(userpath)
forcings<-Mussel_pop_dataloader(userpath)
out<-Mussel_pop_main(userpath,forcings)
library(RAC)
Mussel_spatial_skeleton(userpath)
forcings<-Mussel_spatial_dataloader(userpath)
Mussel_spatial_main(userpath,forcings)
library(RAC)
Mussel_spatial_main(userpath,forcings)
library("RAC", lib.loc="~/R/win-library/3.3")
userpath
Mussel_pop_skeleton(userpath)
forcings<-Mussel_pop_dataloader(userpath)
out<-Mussel_pop_main(userpath,forcings)
library(RAC)
out<-Mussel_pop_main(userpath,forcings)
library(RAC)
out<-Mussel_pop_main(userpath,forcings)
library(RAC)
out<-Mussel_pop_main(userpath,forcings)
library(RAC)
out<-Mussel_pop_main(userpath,forcings)
library(RAC)
out<-Mussel_pop_main(userpath,forcings)
library(RAC)
out<-Mussel_pop_main(userpath,forcings)
library(RAC)
out<-Mussel_pop_main(userpath,forcings)
library(RAC)
Bass_pop_skeleton(userpath)
forcings<-Bass_pop_dataloader(userpath)
out<-Bass_pop_main(userpath,forcings)
library(RAC)
out<-Bass_pop_main(userpath,forcings)
library(RAC)
Clam_pop_skeleton(userpath)
forcings<-Clam_pop_skeleton(userpath)
forcings<-Clam_pop_dataloader(userpath)
out<-Clam_pop_main(userpath,forcings)
library(RAC)
out<-Clam_pop_main(userpath,forcings)
library(RAC)
out<-Clam_pop_main(userpath,forcings)
library(RAC)
library("RAC", lib.loc="~/R/win-library/3.3")
library(RAC)
library(RAC)
library("RAC", lib.loc="~/R/win-library/3.3")
remove.packages("RAC", lib="~/R/win-library/3.3")
install.packages("C:/Users/Damiano/Desktop/R package/RAC_1.1.5.4.tar.gz", repos = NULL, type = "source")
library("RAC", lib.loc="~/R/win-library/3.3")
unlink('vignettes/vignette_cache', recursive = TRUE)
library(RAC)
library(RAC)
library(RAC)
remove.packages("RAC", lib="~/R/win-library/3.3")
library(RAC)
